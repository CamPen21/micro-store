package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"micro-store/product-catalog/generated"
	"micro-store/product-catalog/models"

	"github.com/google/uuid"
)

var productsList = []*models.Product{}

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, product models.NewProduct) (*models.Product, error) {
    prod := &models.Product{
        ID: uuid.New().String(),
        Name: product.Name,
        Description: product.Description,
        Price: product.Price,
    }
    productsList = append(productsList, prod)
    return prod, nil
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*models.Product, error) {
    return productsList, nil
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*models.Product, error) {
    for _, product := range(productsList) {
        if product.ID == id {
            return product, nil
        }
    }
    return nil, errors.New("Id didn't match any product")
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
